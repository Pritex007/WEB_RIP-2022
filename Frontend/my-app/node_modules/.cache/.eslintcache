[{"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\index.js":"1","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\App.js":"3","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\NaviBar.js":"4","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\About.js":"5","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\Rent.js":"6","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\DetailedTruck.js":"7","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\TruckCard.js":"8","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\IntervalSelector.js":"9","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\data.js":"10","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\reducer.js":"11","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\context.js":"12","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\History.js":"13","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\NetworkRequests.js":"14","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\register.js":"15","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\auth.js":"16","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\profile.js":"17","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\login.js":"18","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\CSRFToken.js":"19","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\AddNewTruck.js":"20"},{"size":805,"mtime":1671369290783,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1665740497493,"results":"23","hashOfConfig":"22"},{"size":2663,"mtime":1671989892334,"results":"24","hashOfConfig":"22"},{"size":2052,"mtime":1671955360627,"results":"25","hashOfConfig":"22"},{"size":409,"mtime":1672176917225,"results":"26","hashOfConfig":"22"},{"size":4611,"mtime":1672211061535,"results":"27","hashOfConfig":"22"},{"size":7529,"mtime":1672211055562,"results":"28","hashOfConfig":"22"},{"size":2053,"mtime":1670181072366,"results":"29","hashOfConfig":"22"},{"size":1059,"mtime":1671987228523,"results":"30","hashOfConfig":"22"},{"size":1665,"mtime":1668969292332,"results":"31","hashOfConfig":"22"},{"size":6934,"mtime":1672080430198,"results":"32","hashOfConfig":"22"},{"size":466,"mtime":1672001314382,"results":"33","hashOfConfig":"22"},{"size":14239,"mtime":1672086344135,"results":"34","hashOfConfig":"22"},{"size":9715,"mtime":1672076794314,"results":"35","hashOfConfig":"22"},{"size":2705,"mtime":1672211898369,"results":"36","hashOfConfig":"22"},{"size":3311,"mtime":1672211898394,"results":"37","hashOfConfig":"22"},{"size":0,"mtime":1671301976308,"results":"38","hashOfConfig":"22"},{"size":1826,"mtime":1671485806417,"results":"39","hashOfConfig":"22"},{"size":1225,"mtime":1671476479260,"results":"40","hashOfConfig":"22"},{"size":3942,"mtime":1671983952411,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"nucwbp",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\index.js",[],[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\App.js",["117","118"],[],"import React, {useEffect, useReducer} from 'react';\nimport {Route, BrowserRouter as Router, Routes} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NaviBar from \"./Components/NaviBar\";\nimport About from \"./Pages/About\";\nimport Rent from \"./Pages/Rent\";\n    import DetailedTruck from \"./Pages/DetailedTruck\";\n    import {\n        reducer,\n        GET_SELECTED_TRUCK_FROM_LOCAL,\n        SET_SELECTED_TRUCK_FOR_LOCAL\n    } from \"./Supporting Files/reducer\";\n    import {defaultState, Context} from \"./Supporting Files/context\";\n    import History from \"./Pages/History\";\n    import {fetchOrders, fetchTruck, fetchTrucks} from \"./Supporting Files/NetworkRequests\";\n    import Register from \"./Pages/register\";\n    import Login from \"./Pages/login\";\n    import {checkAuthenticated} from \"./Supporting Files/auth\";\n    import AddNewTruck from \"./Pages/AddNewTruck\";\n    import AddTruck from \"./Pages/AddNewTruck\";\n\n    function App() {\n        const [state, dispatch] = useReducer(reducer, defaultState);\n\n    useEffect(() => {\n        dispatch({\n            type: GET_SELECTED_TRUCK_FROM_LOCAL,\n            payload: {}\n        })\n    }, [state.id])\n\n    useEffect(()=>{\n        checkAuthenticated().then(status => {\n            console.log(\"AUTH STATUS\", status)\n            dispatch({\n                type: status.isAuthenticated,\n                payload: { userProfileId: status.userProfileId, isManager: status.isManager}\n            })\n        })\n    },[])\n\n    useEffect(()=>{\n        console.log(\"STATE RELOAD IN APP\")\n        console.log(state)\n    },[state])\n\n    useEffect(() => {\n        console.log(\"APP\")\n        console.log(state)\n        dispatch({\n            type: SET_SELECTED_TRUCK_FOR_LOCAL,\n            payload: {}\n        })\n    }, [state.selectedTruck])\n\n\n\n    return (\n        <Context.Provider value={{\n            fetchOrders,\n            fetchTrucks,\n            fetchTruck,\n            state, dispatch\n        }}>\n            <Router>\n                    <NaviBar/>\n                    <Routes>\n                        <Route exact path=\"/about\" element={<About/>}/>\n                        <Route  path=\"/\" element={<Rent/>}/>\n                        <Route  path=\"/register\" element={<Register/>}/>\n                        <Route  path=\"/login\" element={<Login/>}/>\n                        <Route exact path=\"rent/:id\" element={<DetailedTruck/>}/>\n                        <Route exact path=\"rent/add\" element={<AddTruck/>}/>\n                        <Route exact path=\"history/:id\" element={<History/>}/>\n                    </Routes>\n            </Router>\n        </Context.Provider>\n);\n}\n\nexport default App;",[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\NaviBar.js",["119","120","121","122"],[],"import { Link, use } from  'react-router-dom'\r\nimport { Fragment } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Navbar, Button, Nav } from 'react-bootstrap';\r\nimport React, {useContext} from \"react\";\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {Switch} from \"@mui/material\";\r\nimport {SWITCH_ID} from \"../Supporting Files/reducer\";\r\nimport {logout} from \"../Supporting Files/auth\";\r\n\r\nconst linkStyle = {\r\n    margin: \"6px\",\r\n    textDecoration: \"none\",\r\n    color: \"hsla(0,0%,100%,0.55)\",\r\n    fontSize: \"18px\"\r\n};\r\n\r\nconst brandStyle = {\r\n    margin: \"8px\",\r\n    textDecoration: \"none\",\r\n    color: \"hsla(0,0%,100%,0.55)\",\r\n    fontSize: \"24px\"\r\n};\r\n\r\n\r\nfunction NaviBar() {\r\n    const { state, dispatch } = useContext(Context)\r\n\r\n    const authLinks = (\r\n        <>\r\n            <Nav.Link><Link to=\"/login\" style={linkStyle} onClick={() => {logout().then(status => {dispatch({type: status, payload: {}})})}}>LogOut</Link></Nav.Link>\r\n        </>\r\n    );\r\n\r\n    const guestLinks = (\r\n        <>\r\n            <Nav.Link><Link to=\"/login\" style={linkStyle}>LogIn</Link></Nav.Link>\r\n            <Nav.Link><Link to=\"/register\" style={linkStyle}>SignUp</Link></Nav.Link>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand><Link to=\"/\" style={brandStyle}>Xonest transport</Link></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link><Link to=\"/\" style={linkStyle}>Rent</Link></Nav.Link>\r\n                    <Nav.Link><Link to=\"/about\" style={linkStyle}>About</Link></Nav.Link>\r\n                    <Nav.Link><Link to={`/history/${state.id}`} style={linkStyle}>History</Link></Nav.Link>\r\n                </Nav>\r\n                { state.isAuthenticated ? authLinks : guestLinks }\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NaviBar;","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\About.js",["123","124"],[],"import Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst aboutStyle = {\r\n    margin: \"8px 16px\"\r\n};\r\n\r\nfunction About() {\r\n    return (\r\n        <div class=\"about\" style={aboutStyle}>\r\n            <h3>Xonest transport one of the most popular and reliable company.</h3>\r\n            <p> We care about our customers.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\Rent.js",["125","126","127","128","129","130","131"],[],"import React, {useContext, useEffect} from 'react';\r\nimport {Col, Row, Button, Form} from \"react-bootstrap\";\r\nimport TruckCard from \"../Components/TruckCard\";\r\nimport IntervalSelector from \"../Components/IntervalSelector\";\r\nimport {LOAD_TRUCKS, SET_MAX_PRICE, SET_MIN_PRICE, SWITCH_ID} from \"../Supporting Files/reducer\";\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {checkUserIsAuth} from \"../App\";\r\nimport {postOrder} from \"../Supporting Files/NetworkRequests\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {StatusEnum} from \"./History\";\r\nimport {Breadcrumbs} from \"@mui/material\";\r\nimport {cardStyle} from \"./DetailedTruck\";\r\n\r\nconst TableBlockStyle = {\r\n    margin: \"20px 15%\",\r\n    textAlign: 'center',\r\n}\r\n\r\nconst TableCardStyle = {\r\n    display: \"inline-block\",\r\n    margin: \"8px 8px 8px 0px\",\r\n}\r\n\r\nfunction Rent() {\r\n    const {\r\n        fetchTrucks,\r\n        state,\r\n        dispatch\r\n    } = useContext(Context)\r\n\r\n    const tryPost = () => {\r\n        if (state.isAuthenticated) {\r\n            postOrder({\r\n                price: state.trucks.find(element => element.pk == state.selectedTruck).price,\r\n                address_take: \"Москва\",\r\n                time: state.time,\r\n                car: state.selectedTruck,\r\n                userProfile: state.id,\r\n                status: StatusEnum.Pending\r\n            })\r\n        } else {\r\n            alert(\"Авторизируйтесь, чтобы оформить заказ\")\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        fetchTrucks(state.minPrice, state.maxPrice).then(trucks => {\r\n            dispatch({\r\n                type: LOAD_TRUCKS,\r\n                payload: {\r\n                    trucks: trucks\r\n                }\r\n            })\r\n        })\r\n    },[state.minPrice, state.maxPrice])\r\n\r\n    useEffect(()=>{\r\n    },[state])\r\n\r\n    return (\r\n        <>\r\n            <IntervalSelector/>\r\n            <Breadcrumbs style={TableBlockStyle} aria-label='breadcrumb'>\r\n                <Link style={{textDecoration: 'none'}} to='/'>Rent</Link>\r\n            </Breadcrumbs>\r\n            <div style={TableBlockStyle}>\r\n                <Form.Group>\r\n                    <Row>\r\n                        <Form.Group className=\"mb-3\" style={{width: \"160px\"}}>\r\n                            <Form.Label>Min</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MIN_PRICE, payload: { minPrice: event.target.value} })}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" style={{width: \"160px\"}}>\r\n                            <Form.Label>Max</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MAX_PRICE, payload: { maxPrice: event.target.value} })}/>\r\n                        </Form.Group>\r\n                        {\r\n                            state.isManager &&\r\n                            <Link to=\"/rent/add\" style={{width: \"160px\", height: \"40px\", margin: \"auto 0 auto auto\", text: \"right\"}}>Добавить авто</Link>\r\n                        }\r\n                    </Row>\r\n                </Form.Group>\r\n                <Row className=\"g-4\">\r\n                    {state.trucks.map((item, index)=>{\r\n                        console.log(state.selectedTruck)\r\n                        return<Col>\r\n                            <TruckCard\r\n                                key={item.pk}\r\n                                id={item.pk}\r\n                                name={item.title}\r\n                                price={item.price}\r\n                                brand={item.brand}\r\n                                capacity={item.capacity}\r\n                                image={item.photo}\r\n                                isSelected={state.selectedTruck == item.pk}/>\r\n                        </Col>\r\n                    })}\r\n                </Row>\r\n                { state.isAuthenticated &&\r\n                    <Button variant=\"primary\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                                width: \"160px\",\r\n                                height: \"80px\",\r\n                                fontSize: \"30px\"}}\r\n                            onClick={tryPost}\r\n                    >\r\n                        Заказать\r\n                    </Button>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Rent;","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\DetailedTruck.js",["132","133","134","135"],[],"import React, {useContext, useEffect} from 'react';\r\nimport {Card, Form} from \"react-bootstrap\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {Breadcrumbs} from \"@mui/material\";\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {CHANGE_TRUCK, LOAD_TRUCK, TOGGLE_TRUCK} from \"../Supporting Files/reducer\";\r\nimport {createRoot} from \"react-dom/client\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {changeTruck, deleteTruck} from \"../Supporting Files/NetworkRequests\";\r\n\r\n\r\nconst cardStyle = {\r\n    margin: \"8px 30%\",\r\n    textColor: \"black\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst cardImage = {\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n};\r\n\r\nconst confirmButtonStyle = {\r\n    width: \"100%\",\r\n    backgroundColor: \"green\",\r\n    borderColor: \"green\"\r\n};\r\n\r\nconst removeButtonStyle = {\r\n    width: \"100%\",\r\n    backgroundColor: \"red\",\r\n    borderColor: \"red\"\r\n};\r\n\r\nfunction DetailedTruck() {\r\n    const {id} = useParams();\r\n\r\n    const {\r\n        fetchTruck,\r\n        fetchBrand,\r\n        dispatch,\r\n        state\r\n    } = useContext(Context)\r\n\r\n    useEffect(() => {\r\n        fetchTruck(id).then(truck => {\r\n                dispatch({\r\n                    type: LOAD_TRUCK,\r\n                    payload: {\r\n                        truck: truck\r\n                    }\r\n                })\r\n        })\r\n        return () => {\r\n\r\n        }\r\n    },[])\r\n\r\n   /* useEffect(()=>{\r\n        const  getTruck = async () => {\r\n            const res = await fetch(`/api/cars/${id}`)\r\n                .then((response) => {\r\n                    return response.json();\r\n                }).catch(()=>{\r\n                    return {resultCount:0, results:[]}\r\n                })\r\n            console.log(res)\r\n            setData(res)\r\n\r\n            const resBrand = await fetch(`/api/brands/${res.brand}`)\r\n                .then((response) => {\r\n                    return response.json();\r\n                }).catch(()=>{\r\n                    return {resultCount:0, results:[]}\r\n                })\r\n            console.log(resBrand)\r\n            setBrand(resBrand)\r\n        }\r\n\r\n        getTruck();\r\n    },[])*/\r\n\r\n    if (!state.truck) {\r\n        return <></>\r\n    } else {\r\n        if (!state.isManager) {\r\n            return (\r\n                <>\r\n                    <Breadcrumbs style={cardStyle} aria-label='breadcrumb'>\r\n                        <Link style={{textDecoration: 'none'}} to='/'>Rent</Link>\r\n                        <Link style={{textDecoration: 'none'}}\r\n                              to={`/rent/${id}`}>{state.truck.brand + \" \" + state.truck.title}</Link>\r\n                    </Breadcrumbs>\r\n                    <Card style={cardStyle}>\r\n                        <Card.Img style={cardImage} className=\"img-fluid\" variant=\"top\" src={state.truck.photo}\r\n                                  height={100}\r\n                                  width={100}/>\r\n                        <Card.Body>\r\n                            <Card.Title>{state.truck.brand + \" \" + state.truck.title}</Card.Title>\r\n                        </Card.Body>\r\n                        <ListGroup className=\"list-group-flush\">\r\n                            <ListGroup.Item>Вместимость: {state.truck.capacity}м<sup>3</sup></ListGroup.Item>\r\n                            <ListGroup.Item>Стоимость: {state.truck.price}р.</ListGroup.Item>\r\n                            <ListGroup.Item>Описание: {state.truck.description}</ListGroup.Item>\r\n                            <ListGroup.Item>Грузоподъемность: {state.truck.payload} т.</ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    <Breadcrumbs style={cardStyle} aria-label='breadcrumb'>\r\n                        <Link style={{textDecoration: 'none'}} to='/'>Rent</Link>\r\n                        <Link style={{textDecoration: 'none'}}\r\n                              to={`/rent/${id}`}>{state.truck.brand + \" \" + state.truck.title}</Link>\r\n                    </Breadcrumbs>\r\n                    <Card style={cardStyle}>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Фото</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.photo} name=\"url photo\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { photo: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Брэнд</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.brand} name=\"brand\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { brand: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Модель</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.title} name=\"model\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { title: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Вместимость, м<sup>3</sup></Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.capacity} name=\"capacity\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { capacity: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Стоимость, р.</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.price} name=\"price\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { price: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Описание</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.description} name=\"discription\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { description: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-2\">\r\n                            <Form.Label >Грузоподъемность, т.</Form.Label>\r\n                            <Form.Control type=\"url\" value={state.truck.payload} name=\"payload\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { payload: e.target.value } }) }}/>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\"\r\n                                className=\"mb-2\"\r\n                                style={confirmButtonStyle}\r\n                                onClick={\r\n                                    () => changeTruck(state.truck)\r\n                                }>\r\n                            Подтвердить изменения\r\n                        </Button>\r\n                        <Button variant=\"primary\"\r\n                                style={removeButtonStyle}\r\n                                onClick={() => deleteTruck(state.truck.pk)}>\r\n                            Удалить\r\n                        </Button>\r\n                    </Card>\r\n\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default DetailedTruck;","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\TruckCard.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\IntervalSelector.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\data.js",[],[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\reducer.js",["136","137","138","139","140","141","142","143","144"],[],"import {defaultState} from \"./context\";\r\nimport {StatusEnum} from \"../Pages/History\";\r\n\r\nexport const\r\n    TOGGLE_TRUCK = 'TOGGLE_TRUCK',\r\n    LOAD_TRUCKS = 'LOAD_TRUCKS',\r\n    LOAD_TRUCK = 'LOAD_TRUCK',\r\n    GET_SELECTED_TRUCK_FROM_LOCAL = 'GET_SELECTED_TRUCK_FROM_LOCAL',\r\n    SET_SELECTED_TRUCK_FOR_LOCAL = 'SET_SELECTED_TRUCK_FROM_LOCAL',\r\n    LOAD_ORDERS = \"LOAD_ORDERS\",\r\n    SWITCH_ID = \"SWITCH_ID\",\r\n    POST_ORDER = \"POST_ORDER\",\r\n    DATETIME_CHANGE = \"DATETIME_CHANGE\",\r\n    SET_MIN_PRICE = \"SET_MIN_PRICE\",\r\n    SET_MAX_PRICE = \"SET_MAX_PRICE\",\r\n\r\n    CHANGE_ORDER_TRUCK = \"CHANGE_ORDER_TRUCK\",\r\n\r\n    SET_MIN_TIME = \"SET_MIN_TIME\",\r\n    SET_MAX_TIME = \"SET_MAX_TIME\",\r\n\r\n    CHANGE_STATUS = \"CHANGE_STATUS\",\r\n    CHANGE_STATUS_FILTER = \"CHANGE_STATUS_FILTER\",\r\n\r\n    DELETE_TRUCK = \"DELETE_TRUCK\",\r\n    CHANGE_TRUCK = \"CHANGE_TRUCK\",\r\n\r\n    CHANGE_ORDER_DRIVER = \"CHANGE_ORDER_DRIVER\",\r\n    CHANGE_ORDER_TIME = \"CHANGE_ORDER_TIME\",\r\n\r\n    REGISTER_SUCCESS = \"REGISTER_SUCCESS\",\r\n    REGISTER_FAIL = \"REGISTER_FAIL\",\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAIL = \"LOGIN_FAIL\",\r\n    LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\",\r\n    LOGOUT_FAIL = \"LOGOUT_FAIL\",\r\n    AUTHENTICATED_SUCCESS = \"AUTHENTICATED_SUCCESS\",\r\n    AUTHENTICATED_FAIL = \"AUTHENTICATED_FAIL\",\r\n\r\n    LOAD_USER_PROFILE_SUCCESS = \"LOAD_USER_PROFILE_SUCCESS\",\r\n    LOAD_USER_PROFILE_FAIL = \"LOAD_USER_PROFILE_FAIL\"\r\n\r\nexport const reducer = (state, action) => {\r\n// type, payload\r\n    const { type, payload } = action\r\n    console.log(\"REDUCER\", type)\r\n    switch(type) {\r\n        case CHANGE_ORDER_DRIVER:\r\n            var result = state.orders\r\n            result[payload.index].driver = payload.driver\r\n            return {\r\n                ...state,\r\n                orders: result\r\n            }\r\n        case CHANGE_ORDER_TIME:\r\n            var result = state.orders\r\n            result[payload.index].time = payload.time\r\n            return {\r\n                ...state,\r\n                orders: result\r\n            }\r\n        case CHANGE_ORDER_TRUCK:\r\n            var result = state.orders\r\n            result[payload.index].truck = payload.truckId\r\n            return {\r\n                ...state,\r\n                orders: result\r\n            }\r\n        case CHANGE_STATUS_FILTER:\r\n            return {\r\n                ...state,\r\n                statusFilter: payload\r\n            }\r\n        case SET_MAX_TIME:\r\n            return {\r\n                ...state,\r\n                maxTime: payload.maxTime\r\n            }\r\n        case SET_MIN_TIME:\r\n            return {\r\n                ...state,\r\n                minTime: payload.minTime\r\n            }\r\n        case CHANGE_STATUS:\r\n            var result = state.orders\r\n            result[payload.index].status = payload.status\r\n            if (payload.status == StatusEnum.Denied || payload.status == StatusEnum.Done) {\r\n                result[payload.index].date_end = new Date()\r\n            }\r\n            return {\r\n                ...state,\r\n                orders: result\r\n            }\r\n        case CHANGE_TRUCK:\r\n            return {\r\n                ...state,\r\n                truck: {\r\n                    ...state.truck,\r\n                    ...payload\r\n                }\r\n            }\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case AUTHENTICATED_FAIL:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case AUTHENTICATED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                id: payload.userProfileId ?? 0,\r\n                isManager: payload.isManager,\r\n                isAuthenticated: true\r\n            }\r\n        case REGISTER_SUCCESS:\r\n            console.log(\"REGISTER_SUCCESS\")\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            console.log(\"LOGIN_SUCCESS ID\", payload)\r\n            return {\r\n                ...state,\r\n                id: payload.id,\r\n                isAuthenticated: true,\r\n                isManager: payload.isManager\r\n            }\r\n        case SET_MIN_PRICE:\r\n            return {\r\n                ...state,\r\n                minPrice: payload.minPrice\r\n            }\r\n        case SET_MAX_PRICE:\r\n            return {\r\n                ...state,\r\n                maxPrice: payload.maxPrice\r\n            }\r\n        case DATETIME_CHANGE:\r\n            console.log(\"DATETIME_CHANGE\")\r\n            const newTime = new Date(payload.time).toJSON()\r\n            return {\r\n                ...state,\r\n                time: newTime\r\n            }\r\n        case POST_ORDER:\r\n            console.log(\"POST_ORDER\")\r\n            return {\r\n                state\r\n            }\r\n        case SWITCH_ID:\r\n            console.log(\"SWITCH_ID\")\r\n            return {\r\n                ...state,\r\n                selectedTruck: {},\r\n                id: state.id == 0 ? 1 : 0\r\n            }\r\n        case LOAD_ORDERS:\r\n            console.log(\"LOAD_ORDERS\")\r\n            return {\r\n                ...state,\r\n                orders: payload.orders\r\n            }\r\n        case LOAD_TRUCKS:\r\n            console.log(\"LOAD_TRUCKS\")\r\n            return {\r\n                ...state,\r\n                trucks: payload.trucks\r\n            }\r\n        case LOAD_TRUCK:\r\n            console.log(\"LOAD_TRUCK SUCCESS\")\r\n            return {\r\n                ...state,\r\n                truck: payload.truck\r\n            }\r\n        case TOGGLE_TRUCK:\r\n            console.log(\"TOGGLE_TRUCK\")\r\n            if (state.selectedTruck == payload.id) {\r\n                return {\r\n                    ...state,\r\n                    selectedTruck: {}\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    selectedTruck: payload.id,\r\n                }\r\n            }\r\n\r\n        case GET_SELECTED_TRUCK_FROM_LOCAL:\r\n            console.log(`GET_SELECTED_TRUCK_FROM_LOCAL`)\r\n            try {\r\n                const raw = localStorage.getItem(`BMSTU USER: ${state.id}`) || {}\r\n                const prepared = JSON.parse(raw)\r\n                if (prepared.id == state.id) {\r\n                    return {\r\n                        ...state,\r\n                        selectedTruck: prepared.selectedTruck,\r\n                    }\r\n                } else {\r\n                    return state\r\n                }\r\n            } catch { return state }\r\n\r\n        case SET_SELECTED_TRUCK_FOR_LOCAL:\r\n            try {\r\n            console.log(`SET_SELECTED_TRUCK_FOR_LOCAL`)\r\n            localStorage.setItem(`BMSTU USER: ${state.id}`, JSON.stringify({\r\n                id: state.id,\r\n                selectedTruck: state.selectedTruck\r\n            }))\r\n            return state\r\n            } catch { return state }\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\context.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\History.js",["145","146","147","148","149","150","151","152","153","154","155","156","157"],[],"import Table from 'react-bootstrap/Table';\r\nimport {Button, Form, Row} from \"react-bootstrap\";\r\nimport TruckCard from \"../Components/TruckCard\";\r\nimport React, {useContext, useEffect} from \"react\";\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {\r\n    CHANGE_ORDER_DRIVER,\r\n    CHANGE_ORDER_TIME,\r\n    CHANGE_ORDER_TRUCK,\r\n    CHANGE_STATUS, CHANGE_STATUS_FILTER, CHANGE_TRUCK,\r\n    LOAD_ORDERS, LOAD_TRUCKS,\r\n    SET_MAX_PRICE,\r\n    SET_MAX_TIME,\r\n    SET_MIN_PRICE,\r\n    SET_MIN_TIME\r\n} from \"../Supporting Files/reducer\";\r\nimport {changeOrderStatus, changeOrderTime, changeOrderTruck} from \"../Supporting Files/NetworkRequests\";\r\n\r\nexport const StatusEnum = {\r\n    Pending: \"ожидает подтверждения\",\r\n    Confirmed: \"подтвержден\",\r\n    Denied: \"отклонен\",\r\n    InProgress: \"Выполняется\",\r\n    Done: \"Выполнен\"\r\n}\r\n\r\nfunction History() {\r\n    const {id} = useParams()\r\n\r\n    const {\r\n        fetchTrucks,\r\n        fetchOrders,\r\n        dispatch,\r\n        state\r\n    } = useContext(Context)\r\n\r\n    useEffect(()=>{\r\n        fetchTrucks(0, 10000000).then(trucks => {\r\n            dispatch({\r\n                type: LOAD_TRUCKS,\r\n                payload: {\r\n                    trucks: trucks\r\n                }\r\n            })\r\n        })\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        fetchOrders(state.minTime, state.maxTime, state.statusFilter).then(orders => {\r\n            console.log(\"fetchOrders\")\r\n            console.log(orders)\r\n            dispatch({\r\n                type: LOAD_ORDERS,\r\n                payload: { orders: orders }\r\n            })\r\n        })\r\n    }, [state.minTime, state.maxTime, state.statusFilter])\r\n\r\n\r\n    if (state.isAuthenticated) {\r\n        if (!state.isManager) {\r\n            return (\r\n                <>\r\n                    <Row>\r\n                        <Form.Select aria-label=\"Default select example\" style={{\r\n                            width: \"12%\",\r\n                            margin: \"auto auto 0 20%\"\r\n                        }} onChange={e => { dispatch({type: CHANGE_STATUS_FILTER, payload: e.target.value}) }}>\r\n                            <option>Все</option>\r\n                            <option>{StatusEnum.Pending}</option>\r\n                            <option>{StatusEnum.Confirmed}</option>\r\n                            <option>{StatusEnum.Denied}</option>\r\n                            <option>{StatusEnum.InProgress}</option>\r\n                            <option>{StatusEnum.Done}</option>\r\n                        </Form.Select>\r\n                        <Form.Group style={{\r\n                            width: \"30%\",\r\n                            margin: \"4px 20% auto auto\"\r\n                        }}>\r\n                            <Row>\r\n                                <Form.Group className=\"col-6\">\r\n                                    <Form.Label>Min</Form.Label>\r\n                                    <Form.Control type=\"date\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MIN_TIME, payload: { minTime: event.target.value } })}/>\r\n                                </Form.Group>\r\n                                <Form.Group className=\"col-6\">\r\n                                    <Form.Label>Max</Form.Label>\r\n                                    <Form.Control type=\"date\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MAX_TIME, payload: { maxTime: event.target.value } })}/>\r\n                                </Form.Group>\r\n                            </Row>\r\n                        </Form.Group>\r\n                    </Row>\r\n                    <Table striped bordered hover style={{\r\n                        width: \"60%\",\r\n                        textAlign: \"center\",\r\n                        margin: \"24px auto\"\r\n                    }}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Номер заказа</th>\r\n                            <th>Стоимость р.</th>\r\n                            <th>Авто</th>\r\n                            <th>Водитель</th>\r\n                            <th>Дата заказа</th>\r\n                            <th>Дата завершения</th>\r\n                            <th>Статус</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {state.orders.map((item) => {\r\n                            return <tr>\r\n                                <th>{item.pk}</th>\r\n                                <th>{item.price}</th>\r\n                                <th>{state.trucks.find(x => x.pk === item.car).brand + \" \" + state.trucks.find(x => x.pk === item.car).title}</th>\r\n                                <th>{item.driver}</th>\r\n                                <th>{(new Date(item.time)).toLocaleDateString()}</th>\r\n                                { item.date_end != null &&\r\n                                    <th>{(new Date(item.date_end)).toLocaleDateString()}</th>\r\n                                }\r\n                                { item.date_end == null &&\r\n                                    <th> --- </th>\r\n                                }\r\n                                <th>{item.status}</th>\r\n                            </tr>\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                <Row>\r\n                    <Form.Select aria-label=\"Default select example\" style={{\r\n                        width: \"12%\",\r\n                        margin: \"auto auto 0 20%\"\r\n                    }} onChange={e => { dispatch({type: CHANGE_STATUS_FILTER, payload: e.target.value}) }}>\r\n                        <option>Все</option>\r\n                        <option>{StatusEnum.Pending}</option>\r\n                        <option>{StatusEnum.Confirmed}</option>\r\n                        <option>{StatusEnum.Denied}</option>\r\n                        <option>{StatusEnum.InProgress}</option>\r\n                        <option>{StatusEnum.Done}</option>\r\n                    </Form.Select>\r\n                    <Form.Group style={{\r\n                        width: \"30%\",\r\n                        margin: \"4px 20% auto auto\"\r\n                    }}>\r\n                        <Row>\r\n                            <Form.Group className=\"col-6\">\r\n                                <Form.Label>Min</Form.Label>\r\n                                <Form.Control type=\"date\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MIN_TIME, payload: { minTime: event.target.value } })}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"col-6\">\r\n                                <Form.Label>Max</Form.Label>\r\n                                <Form.Control type=\"date\" placeholder=\"---\" onChange={event => dispatch({ type: SET_MAX_TIME, payload: { maxTime: event.target.value } })}/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                    </Form.Group>\r\n                </Row>\r\n                    <Table striped bordered hover style={{\r\n                        width: \"80%\",\r\n                        textAlign: \"center\",\r\n                        margin: \"24px auto\"\r\n                    }}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Номер заказа</th>\r\n                            <th>Стоимость р.</th>\r\n                            <th>Авто</th>\r\n                            <th>Дата заказа</th>\r\n                            <th>Дата создания</th>\r\n                            <th>Водитель</th>\r\n                            <th>Дата завершения</th>\r\n                            <th>Статус</th>\r\n                            <th>Решить</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {state.orders.map((item, index) => {\r\n                            return <tr>\r\n                                <th>{item.pk}</th>\r\n                                <th>{item.price}</th>\r\n                                <th>\r\n                                    <Form.Select aria-label=\"Default select example\" style={{\r\n                                        width: \"100%\"\r\n                                    }} onChange={e => { changeOrderTruck(item.pk, e.target.value).then(dispatch({type: CHANGE_ORDER_TRUCK, payload: { index: index, truckId: e.target.value}}))}}>\r\n                                        <option value={state.trucks.find(x => x.pk === item.car).pk}>{state.trucks.find(x => x.pk === item.car).brand + \" \" + state.trucks.find(x => x.pk === item.car).title}</option>\r\n                                        {state.trucks.filter(x => x.pk != item.car).map(temp => {\r\n                                            return <option value={temp.pk}>{temp.brand + \" \" + temp.title}</option>\r\n                                        })}\r\n                                    </Form.Select>\r\n                                </th>\r\n                                <th>\r\n                                    <div>{ new Date(item.time).toLocaleDateString() }</div>\r\n                                    <div><Form.Control type=\"date\" onChange={ e => {changeOrderTime(item.pk, e.target.value).then(dispatch({type: CHANGE_ORDER_TIME, payload: {index: index, time: e.target.value }}))}}/></div>\r\n                                </th>\r\n                                <th>{(new Date(item.date_create)).toLocaleDateString()}</th>\r\n                                <th>{item.driver}</th>\r\n                                { item.date_end != null &&\r\n                                    <th>{(new Date(item.date_end)).toLocaleDateString()}</th>\r\n                                }\r\n                                { item.date_end == null &&\r\n                                    <th> --- </th>\r\n                                }\r\n                                <th>{item.status}</th>\r\n                                <th>\r\n                                { item.status == StatusEnum.Pending &&\r\n                                    <>\r\n                                        <Button variant=\"success\" style={{marginRight: \"6px\"}}\r\n                                                onClick={() => {changeOrderStatus(item.pk, StatusEnum.Confirmed).then(\r\n                                                    dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.Confirmed }})\r\n                                                )}}>Подтвердить</Button>\r\n                                        <Button variant=\"danger\" style={{marginLeft: \"6px\"}}\r\n                                                onClick={() => {changeOrderStatus(item.pk, StatusEnum.Denied).then(\r\n                                                    dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.Denied }})\r\n                                                )}}>Отклонить</Button>\r\n                                    </>\r\n                                }\r\n                                { item.status == StatusEnum.Confirmed &&\r\n                                    <>\r\n                                        <Button variant=\"success\" style={{marginRight: \"6px\"}}\r\n                                                onClick={() => {const driver = prompt('Укажите фамилию водителя');\r\n                                                    if (driver != \"\") {\r\n                                                        changeOrderStatus(item.pk, StatusEnum.InProgress, driver).then(\r\n                                                        dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.InProgress }})\r\n                                                ).then(dispatch({type: CHANGE_ORDER_DRIVER, payload: { index: index, driver: driver }}))\r\n                                                    }}}>Начать выполнение</Button>\r\n                                        <Button variant=\"danger\" style={{marginLeft: \"6px\"}}\r\n                                                onClick={() => {changeOrderStatus(item.pk, StatusEnum.Denied).then(\r\n                                                    dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.Denied }})\r\n                                                )}}>Отклонить</Button>\r\n                                    </>\r\n                                }\r\n                                { item.status == StatusEnum.InProgress &&\r\n                                    <>\r\n                                        <Button variant=\"success\" style={{marginRight: \"6px\"}}\r\n                                                onClick={() => {changeOrderStatus(item.pk, StatusEnum.Done).then(\r\n                                                    dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.Done }})\r\n                                                )}}>Завершить</Button>\r\n                                        <Button variant=\"danger\" style={{marginLeft: \"6px\"}}\r\n                                                onClick={() => {changeOrderStatus(item.pk, StatusEnum.Denied).then(\r\n                                                    dispatch({type: CHANGE_STATUS, payload: { index: index, status: StatusEnum.Denied }})\r\n                                                )}}>Отклонить</Button>\r\n                                    </>\r\n                                }\r\n                                </th>\r\n                            </tr>\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            );\r\n        }\r\n    } else {\r\n        return (<h2 style={{\r\n            textAlign: \"center\",\r\n            marginTop: \"16px\"\r\n        }}>Авторизируйтесь, чтобы посмотреть список покупок</h2>)\r\n    }\r\n}\r\n\r\nexport default History;","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\NetworkRequests.js",["158","159","160","161","162"],[],"import axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport {StatusEnum} from \"../Pages/History\";\r\n\r\nexport const postOrder = async (order) => {\r\n    console.log(order)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    const body = { ...order, date_create: new Date() }\r\n\r\n    axios.post('http://localhost:8000/api/orders/', body, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const changeOrderTruck = async (orderId, truckId) => {\r\n    console.log(orderId)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    var body = { car: truckId }\r\n\r\n    console.log(\"CHANGE ORDER TRUCK\", body)\r\n\r\n    axios.patch(`http://localhost:8000/api/orders/${orderId}/`, body, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const changeOrderTime = async (orderId, time) => {\r\n    console.log(orderId)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    var body = { time: time }\r\n\r\n    console.log(\"CHANGE ORDER TRUCK\", body)\r\n\r\n    axios.patch(`http://localhost:8000/api/orders/${orderId}/`, body, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const changeOrderStatus = async (orderId, status, driver = null, date) => {\r\n    console.log(orderId)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    const current_date = new Date()\r\n\r\n    var dateBody = {}\r\n\r\n    switch(status) {\r\n        case StatusEnum.Pending, StatusEnum.Confirmed:\r\n        case StatusEnum.InProgress:\r\n            dateBody = { date_start: current_date }\r\n        case StatusEnum.Done, StatusEnum.Denied:\r\n            dateBody = { date_end: current_date }\r\n    }\r\n\r\n    var body = {}\r\n\r\n    if (driver != null)     {\r\n        body  = { status: status, driver: driver, ...dateBody }\r\n    } else {\r\n        body  = { status: status, ...dateBody }\r\n    }\r\n\r\n    console.log(\"CHANGE ORDER\", body)\r\n\r\n    axios.patch(`http://localhost:8000/api/orders/${orderId}/`, body, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const postTruck = async (truck) => {\r\n    console.log(\"try to POST TRUCK\", truck)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    axios.post('http://localhost:8000/api/cars/', truck, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не заполнили одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const changeTruck = async (truck) => {\r\n    console.log(truck)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    axios.put(`http://localhost:8000/api/cars/${truck.pk}/`, truck, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const deleteTruck = async (truckId) => {\r\n    console.log(truckId)\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    axios.delete(`http://localhost:8000/api/cars/${truckId}/`, config)\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            alert(\"Произошла ошибка при отправке.\\nВозможно, вы не выбрали одно из полей.\")\r\n        });\r\n}\r\n\r\nexport const fetchTrucks = async (min, max) => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n\r\n    var res = await axios.get(`http://localhost:8000/api/cars/?price_min=${min}&price_max=${max}`, config)\r\n        .then(function (response) {\r\n            console.log(\"CARS\", response);\r\n            return response.data;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            return {resultCount:0, results:[]}\r\n        });\r\n    return res\r\n}\r\n\r\n// export const fetchBrands = async (tempTrucks) => {\r\n//     const res = []\r\n//     console.log(tempTrucks)\r\n//     for (const element of tempTrucks) {\r\n//         const tempRes = await fetch(`http://localhost:8000/api/brands/${element.brand}`)\r\n//             .then((response) => {\r\n//                 return response.json();\r\n//             }).catch(() => {\r\n//                 return {resultCount: 0, results: []}\r\n//             })\r\n//         res.push(tempRes.title)\r\n//     }\r\n//     console.log(res)\r\n//     return res\r\n// }\r\n\r\nexport const fetchTruck = async (truckID) => {\r\n    const res = await fetch(`http://localhost:8000/api/cars/${truckID}`)\r\n        .then((response) => {\r\n            return response.json();\r\n        }).catch(() => {\r\n            return {resultCount: 0, results: []}\r\n        })\r\n    console.log(\"fetchTruck\")\r\n    console.log(res)\r\n    return res\r\n}\r\n\r\n// export const fetchBrand = async (brandID) => {\r\n//     const res = await fetch(`http://localhost:8000/api/brands/${brandID}`)\r\n//         .then((response) => {\r\n//             return response.json();\r\n//         }).catch(()=>{\r\n//             return {resultCount:0, results:[]}\r\n//         })\r\n//     console.log(\"fetchBrand\")\r\n//     console.log(res)\r\n//     return res\r\n// }\r\n\r\nexport const fetchOrders = async (min, max, status) => {\r\n    // var res = await fetch(`http://localhost:8000/api/orders`)\r\n    //     .then((response) => {\r\n    //         return response.json();\r\n    //     }).catch(()=>{\r\n    //         return {resultCount:0, results:[]}\r\n    //     })\r\n    // res = res.filter(order => order.userProfile == userID)\r\n    // res = res.sort((a,b) => a.time < b.time)\r\n    // console.log(\"fetchOrders\")\r\n    // console.log(res)\r\n    // return res\r\n\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken'),\r\n            'sessionid': Cookies.get('sessionid')\r\n        }\r\n    };\r\n    const stringStatus = status == \"Все\" || status == null ? \"\" : status\r\n    var res = await axios.get(`http://localhost:8000/api/orders/?time_after=${min}&time_before=${max}&status=${stringStatus}`, config)\r\n        .then(function (response) {\r\n            console.log(\"ORDER\", response);\r\n            return response.data;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            return {resultCount:0, results:[]}\r\n        });\r\n    console.log(\"RESULT ARRAY ORDER\", res);\r\n    res = res.sort(function(a,b){\r\n        return new Date(b.time) - new Date(a.time);\r\n    });\r\n    return res\r\n}","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\register.js",["163","164","165"],[],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { register } from \"../Supporting Files/auth\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {REGISTER_FAIL} from \"../Supporting Files/reducer\";\r\nimport CSRFToken from '../Components/CSRFToken';\r\n\r\nexport default function Register() {\r\n    const { state, dispatch } = useContext(Context)\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: '',\r\n        re_password: '',\r\n        email: ''\r\n    });\r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n\r\n    const { username, password, re_password, email } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (password === re_password) {\r\n            console.log(username, password, re_password, email)\r\n            register(username, password, re_password, email).then(status => {\r\n                dispatch({ type: status, payload: {} })\r\n            })\r\n            setAccountCreated(true);\r\n        }\r\n    };\r\n\r\n    if (state.isAuthenticated)\r\n        return <Navigate to='/'/>;\r\n    else if (accountCreated)\r\n        return <Navigate to='/login'/>;\r\n\r\n    return (\r\n        <Form onSubmit={event => onSubmit(event)} style={{'margin':'20px auto', 'width':'400px'}}>\r\n            <CSRFToken />\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"username\" placeholder=\"Enter username\" name=\"username\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Repeat password\" name=\"re_password\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n}","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\auth.js",["166"],[],"import Cookies from 'js-cookie';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL\r\n} from './reducer';\r\n\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\nexport const checkAuthenticated = async () => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.get(`http://localhost:8000/authenticated`, config);\r\n\r\n        if (res.data.error || res.data.isAuthenticated === 'error') {\r\n            return  AUTHENTICATED_FAIL\r\n        }\r\n        else if (res.data.isAuthenticated === 'success') {\r\n            return {isAuthenticated: AUTHENTICATED_SUCCESS, userProfileId: res.data.userProfileId, isManager: res.data.isManager}\r\n        }\r\n        else {\r\n            return  AUTHENTICATED_FAIL\r\n        }\r\n    } catch(err) {\r\n        return  AUTHENTICATED_FAIL\r\n    }\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password });\r\n\r\n    try {\r\n        const res = await axios.post('http://localhost:8000/auth/login', body, config)\r\n        console.log(\"res.data.success\", res.data.success)\r\n        if (res.data.success) {\r\n            return {type: LOGIN_SUCCESS, payload: {id: res.data.userProfileId, isManager: res.data.isManager}}\r\n        } else {\r\n            return LOGIN_FAIL\r\n        }\r\n    } catch(err) {\r\n        return LOGIN_FAIL\r\n    }\r\n};\r\n\r\nexport const register = async(username, password, re_password, email) => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password, re_password, email });\r\n\r\n    console.log(\"Body\", body)\r\n    try {\r\n        const res = await axios.post('http://localhost:8000/auth/register', body, config)\r\n        if (res.data.error) {\r\n            console.log(\"REGISTER_FAIL\")\r\n            return REGISTER_FAIL\r\n        } else {\r\n            console.log(\"REGISTER_SUCCESS\")\r\n            return REGISTER_SUCCESS\r\n        }\r\n    } catch (err) {\r\n        console.log(\"Error\", err)\r\n        return REGISTER_FAIL\r\n    }\r\n};\r\n\r\nexport const logout = async ()  => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({});\r\n\r\n    try {\r\n        const res = await axios.post(`http://localhost:8000/auth/logout`, body, config);\r\n\r\n        if (res.data.success) {\r\n            return LOGOUT_SUCCESS\r\n        } else {\r\n            return LOGOUT_FAIL\r\n        }\r\n    } catch(err) {\r\n        return LOGOUT_FAIL\r\n    }\r\n};","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Supporting Files\\profile.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\login.js",["167"],[],"import React, {useContext, useState} from 'react';\r\nimport {Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {login} from \"../Supporting Files/auth\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport CSRFToken from '../Components/CSRFToken';\r\n\r\nexport default function Login() {\r\n    const { state, dispatch } = useContext(Context)\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n    const { username, password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        console.log(username, password)\r\n        login(username, password).then(status => {\r\n            console.log('DISPATCH LOGIN', status)\r\n            dispatch(status)\r\n        })\r\n    };\r\n\r\n    if (state.isAuthenticated) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={event => onSubmit(event)} style={{'margin':'20px auto', 'width':'400px'}}>\r\n            <CSRFToken />\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"username\" placeholder=\"Enter username\" name=\"username\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={e => onChange(e)}/>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n}","C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Components\\CSRFToken.js",[],[],"C:\\Users\\prite\\WebstormProjects\\lab4\\my-app\\src\\Pages\\AddNewTruck.js",["168","169","170","171","172","173","174","175","176","177","178","179","180","181"],[],"import React, {useContext, useEffect} from 'react';\r\nimport {Card, Form} from \"react-bootstrap\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {Breadcrumbs} from \"@mui/material\";\r\nimport {Context} from \"../Supporting Files/context\";\r\nimport {CHANGE_TRUCK, LOAD_TRUCK, TOGGLE_TRUCK} from \"../Supporting Files/reducer\";\r\nimport {createRoot} from \"react-dom/client\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {changeTruck, deleteTruck, postTruck} from \"../Supporting Files/NetworkRequests\";\r\n\r\n\r\nconst cardStyle = {\r\n    margin: \"8px 30%\",\r\n    textColor: \"black\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst cardImage = {\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n};\r\n\r\nconst confirmButtonStyle = {\r\n    width: \"100%\",\r\n    backgroundColor: \"green\",\r\n    borderColor: \"green\"\r\n};\r\n\r\nconst removeButtonStyle = {\r\n    width: \"100%\",\r\n    backgroundColor: \"red\",\r\n    borderColor: \"red\"\r\n};\r\n\r\nfunction AddTruck() {\r\n    const {id} = useParams();\r\n\r\n    const {\r\n        fetchTruck,\r\n        fetchBrand,\r\n        dispatch,\r\n        state\r\n    } = useContext(Context)\r\n\r\n    return (\r\n        <>\r\n            <Card style={cardStyle}>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Фото</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"Url photo: http://example.com/image.jpg\" name=\"url photo\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { photo: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Брэнд</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"Ford\" name=\"brand\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { brand: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Модель</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"Mustang\" name=\"model\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { title: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Вместимость, м<sup>3</sup></Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"8\" name=\"capacity\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { capacity: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Стоимость, р.</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"20000\" name=\"price\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { price: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Описание</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"Лучшее решение для перевозки небольших вещей\" name=\"discription\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { description: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-2\">\r\n                    <Form.Label >Грузоподъемность, т.</Form.Label>\r\n                    <Form.Control type=\"url\" placeholder=\"2\" name=\"payload\" onChange={e => { dispatch({ type: CHANGE_TRUCK, payload: { payload: e.target.value } }) }}/>\r\n                </Form.Group>\r\n                <Button variant=\"primary\"\r\n                        className=\"mb-2\"\r\n                        style={confirmButtonStyle}\r\n                        onClick={\r\n                            () => postTruck(state.truck)\r\n                        }>\r\n                    Добавить\r\n                </Button>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddTruck;",{"ruleId":"182","severity":1,"message":"183","line":19,"column":12,"nodeType":"184","messageId":"185","endLine":19,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":54,"column":8,"nodeType":"188","endLine":54,"endColumn":29,"suggestions":"189"},{"ruleId":"182","severity":1,"message":"190","line":1,"column":16,"nodeType":"184","messageId":"185","endLine":1,"endColumn":19},{"ruleId":"182","severity":1,"message":"191","line":4,"column":18,"nodeType":"184","messageId":"185","endLine":4,"endColumn":24},{"ruleId":"182","severity":1,"message":"192","line":7,"column":9,"nodeType":"184","messageId":"185","endLine":7,"endColumn":15},{"ruleId":"182","severity":1,"message":"193","line":8,"column":9,"nodeType":"184","messageId":"185","endLine":8,"endColumn":18},{"ruleId":"182","severity":1,"message":"194","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":12},{"ruleId":"182","severity":1,"message":"191","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"182","severity":1,"message":"193","line":5,"column":52,"nodeType":"184","messageId":"185","endLine":5,"endColumn":61},{"ruleId":"182","severity":1,"message":"195","line":7,"column":9,"nodeType":"184","messageId":"185","endLine":7,"endColumn":24},{"ruleId":"182","severity":1,"message":"196","line":12,"column":9,"nodeType":"184","messageId":"185","endLine":12,"endColumn":18},{"ruleId":"182","severity":1,"message":"197","line":19,"column":7,"nodeType":"184","messageId":"185","endLine":19,"endColumn":21},{"ruleId":"198","severity":1,"message":"199","line":34,"column":64,"nodeType":"200","messageId":"201","endLine":34,"endColumn":66},{"ruleId":"186","severity":1,"message":"202","line":55,"column":7,"nodeType":"188","endLine":55,"endColumn":39,"suggestions":"203"},{"ruleId":"198","severity":1,"message":"199","line":95,"column":65,"nodeType":"200","messageId":"201","endLine":95,"endColumn":67},{"ruleId":"182","severity":1,"message":"204","line":7,"column":35,"nodeType":"184","messageId":"185","endLine":7,"endColumn":47},{"ruleId":"182","severity":1,"message":"205","line":8,"column":9,"nodeType":"184","messageId":"185","endLine":8,"endColumn":19},{"ruleId":"182","severity":1,"message":"206","line":41,"column":9,"nodeType":"184","messageId":"185","endLine":41,"endColumn":19},{"ruleId":"186","severity":1,"message":"207","line":58,"column":7,"nodeType":"188","endLine":58,"endColumn":9,"suggestions":"208"},{"ruleId":"182","severity":1,"message":"209","line":1,"column":9,"nodeType":"184","messageId":"185","endLine":1,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":56,"column":17,"nodeType":"184","messageId":"212","endLine":56,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":63,"column":17,"nodeType":"184","messageId":"212","endLine":63,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":85,"column":17,"nodeType":"184","messageId":"212","endLine":85,"endColumn":23},{"ruleId":"198","severity":1,"message":"199","line":87,"column":32,"nodeType":"200","messageId":"201","endLine":87,"endColumn":34},{"ruleId":"198","severity":1,"message":"199","line":87,"column":71,"nodeType":"200","messageId":"201","endLine":87,"endColumn":73},{"ruleId":"198","severity":1,"message":"199","line":160,"column":30,"nodeType":"200","messageId":"201","endLine":160,"endColumn":32},{"ruleId":"198","severity":1,"message":"199","line":182,"column":37,"nodeType":"200","messageId":"201","endLine":182,"endColumn":39},{"ruleId":"198","severity":1,"message":"199","line":199,"column":33,"nodeType":"200","messageId":"201","endLine":199,"endColumn":35},{"ruleId":"182","severity":1,"message":"213","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":17},{"ruleId":"182","severity":1,"message":"214","line":6,"column":9,"nodeType":"184","messageId":"185","endLine":6,"endColumn":13},{"ruleId":"182","severity":1,"message":"215","line":11,"column":42,"nodeType":"184","messageId":"185","endLine":11,"endColumn":54},{"ruleId":"182","severity":1,"message":"216","line":13,"column":5,"nodeType":"184","messageId":"185","endLine":13,"endColumn":18},{"ruleId":"182","severity":1,"message":"217","line":15,"column":5,"nodeType":"184","messageId":"185","endLine":15,"endColumn":18},{"ruleId":"182","severity":1,"message":"218","line":29,"column":12,"nodeType":"184","messageId":"185","endLine":29,"endColumn":14},{"ruleId":"186","severity":1,"message":"202","line":47,"column":7,"nodeType":"188","endLine":47,"endColumn":9,"suggestions":"219"},{"ruleId":"186","severity":1,"message":"220","line":58,"column":8,"nodeType":"188","endLine":58,"endColumn":58,"suggestions":"221"},{"ruleId":"198","severity":1,"message":"222","line":189,"column":72,"nodeType":"200","messageId":"201","endLine":189,"endColumn":74},{"ruleId":"198","severity":1,"message":"199","line":208,"column":47,"nodeType":"200","messageId":"201","endLine":208,"endColumn":49},{"ruleId":"198","severity":1,"message":"199","line":220,"column":47,"nodeType":"200","messageId":"201","endLine":220,"endColumn":49},{"ruleId":"198","severity":1,"message":"222","line":224,"column":64,"nodeType":"200","messageId":"201","endLine":224,"endColumn":66},{"ruleId":"198","severity":1,"message":"199","line":235,"column":47,"nodeType":"200","messageId":"201","endLine":235,"endColumn":49},{"ruleId":"223","severity":1,"message":"224","line":101,"column":5,"nodeType":"225","messageId":"226","endLine":107,"endColumn":6},{"ruleId":"227","severity":1,"message":"228","line":102,"column":32,"nodeType":"229","messageId":"230","endLine":102,"endColumn":33},{"ruleId":"231","severity":1,"message":"232","line":105,"column":9,"nodeType":"233","messageId":"234","endLine":106,"endColumn":50},{"ruleId":"227","severity":1,"message":"228","line":105,"column":29,"nodeType":"229","messageId":"230","endLine":105,"endColumn":30},{"ruleId":"198","severity":1,"message":"199","line":283,"column":33,"nodeType":"200","messageId":"201","endLine":283,"endColumn":35},{"ruleId":"182","severity":1,"message":"235","line":1,"column":28,"nodeType":"184","messageId":"185","endLine":1,"endColumn":37},{"ruleId":"182","severity":1,"message":"236","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":17},{"ruleId":"182","severity":1,"message":"237","line":8,"column":9,"nodeType":"184","messageId":"185","endLine":8,"endColumn":22},{"ruleId":"182","severity":1,"message":"238","line":13,"column":17,"nodeType":"184","messageId":"185","endLine":13,"endColumn":30},{"ruleId":"182","severity":1,"message":"236","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":17},{"ruleId":"182","severity":1,"message":"235","line":1,"column":28,"nodeType":"184","messageId":"185","endLine":1,"endColumn":37},{"ruleId":"182","severity":1,"message":"239","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":17},{"ruleId":"182","severity":1,"message":"214","line":4,"column":9,"nodeType":"184","messageId":"185","endLine":4,"endColumn":13},{"ruleId":"182","severity":1,"message":"240","line":5,"column":9,"nodeType":"184","messageId":"185","endLine":5,"endColumn":20},{"ruleId":"182","severity":1,"message":"241","line":7,"column":23,"nodeType":"184","messageId":"185","endLine":7,"endColumn":33},{"ruleId":"182","severity":1,"message":"204","line":7,"column":35,"nodeType":"184","messageId":"185","endLine":7,"endColumn":47},{"ruleId":"182","severity":1,"message":"205","line":8,"column":9,"nodeType":"184","messageId":"185","endLine":8,"endColumn":19},{"ruleId":"182","severity":1,"message":"242","line":10,"column":9,"nodeType":"184","messageId":"185","endLine":10,"endColumn":20},{"ruleId":"182","severity":1,"message":"243","line":10,"column":22,"nodeType":"184","messageId":"185","endLine":10,"endColumn":33},{"ruleId":"182","severity":1,"message":"244","line":19,"column":7,"nodeType":"184","messageId":"185","endLine":19,"endColumn":16},{"ruleId":"182","severity":1,"message":"245","line":30,"column":7,"nodeType":"184","messageId":"185","endLine":30,"endColumn":24},{"ruleId":"182","severity":1,"message":"218","line":37,"column":12,"nodeType":"184","messageId":"185","endLine":37,"endColumn":14},{"ruleId":"182","severity":1,"message":"246","line":40,"column":9,"nodeType":"184","messageId":"185","endLine":40,"endColumn":19},{"ruleId":"182","severity":1,"message":"206","line":41,"column":9,"nodeType":"184","messageId":"185","endLine":41,"endColumn":19},"no-unused-vars","'AddNewTruck' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","ArrayExpression",["247"],"'use' is defined but never used.","'Button' is defined but never used.","'Switch' is defined but never used.","'SWITCH_ID' is defined but never used.","'Card' is defined but never used.","'checkUserIsAuth' is defined but never used.","'cardStyle' is defined but never used.","'TableCardStyle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchTrucks'. Either include them or remove the dependency array.",["248"],"'TOGGLE_TRUCK' is defined but never used.","'createRoot' is defined but never used.","'fetchBrand' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'fetchTruck', and 'id'. Either include them or remove the dependency array.",["249"],"'defaultState' is defined but never used.","no-redeclare","'result' is already defined.","redeclared","'TruckCard' is defined but never used.","'Link' is defined but never used.","'CHANGE_TRUCK' is defined but never used.","'SET_MAX_PRICE' is defined but never used.","'SET_MIN_PRICE' is defined but never used.","'id' is assigned a value but never used.",["250"],"React Hook useEffect has missing dependencies: 'dispatch' and 'fetchOrders'. Either include them or remove the dependency array.",["251"],"Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'useEffect' is defined but never used.","'connect' is defined but never used.","'REGISTER_FAIL' is defined but never used.","'AxiosInstance' is defined but never used.","'ListGroup' is defined but never used.","'Breadcrumbs' is defined but never used.","'LOAD_TRUCK' is defined but never used.","'changeTruck' is defined but never used.","'deleteTruck' is defined but never used.","'cardImage' is assigned a value but never used.","'removeButtonStyle' is assigned a value but never used.","'fetchTruck' is assigned a value but never used.",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [state, state.selectedTruck]",{"range":"262","text":"263"},"Update the dependencies array to be: [state.minPrice, state.maxPrice, fetchTrucks, dispatch]",{"range":"264","text":"265"},"Update the dependencies array to be: [dispatch, fetchTruck, id]",{"range":"266","text":"267"},"Update the dependencies array to be: [dispatch, fetchTrucks]",{"range":"268","text":"269"},"Update the dependencies array to be: [state.minTime, state.maxTime, state.statusFilter, fetchOrders, dispatch]",{"range":"270","text":"271"},[1778,1799],"[state, state.selectedTruck]",[1718,1750],"[state.minPrice, state.maxPrice, fetchTrucks, dispatch]",[1429,1431],"[dispatch, fetchTruck, id]",[1309,1311],"[dispatch, fetchTrucks]",[1638,1688],"[state.minTime, state.maxTime, state.statusFilter, fetchOrders, dispatch]"]