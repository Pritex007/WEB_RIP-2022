{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL } from './reducer';\nimport axios, { AxiosInstance } from 'axios';\nexport const checkAuthenticated = async () => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.get(`http://localhost:8000/authenticated`, config);\n    if (res.data.error || res.data.isAuthenticated === 'error') {\n      return AUTHENTICATED_FAIL;\n    } else if (res.data.isAuthenticated === 'success') {\n      return {\n        isAuthenticated: AUTHENTICATED_SUCCESS,\n        userProfileId: res.data.userProfileId,\n        isManager: res.data.isManager\n      };\n    } else {\n      return AUTHENTICATED_FAIL;\n    }\n  } catch (err) {\n    return AUTHENTICATED_FAIL;\n  }\n};\nexport const login = async (username, password) => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  try {\n    const res = await axios.post('http://localhost:8000/auth/login', body, config);\n    if (res.data.success) {\n      return {\n        type: LOGIN_SUCCESS,\n        payload: res.data.userProfileId\n      };\n    } else {\n      return LOGIN_FAIL;\n    }\n  } catch (err) {\n    return LOGIN_FAIL;\n  }\n};\nexport const register = async (username, password, re_password) => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password,\n    re_password\n  });\n  console.log(\"Body\", body);\n  try {\n    const res = await axios.post('http://localhost:8000/auth/register', body, config);\n    if (res.data.error) {\n      console.log(\"REGISTER_FAIL\");\n      return REGISTER_FAIL;\n    } else {\n      console.log(\"REGISTER_SUCCESS\");\n      return REGISTER_SUCCESS;\n    }\n  } catch (err) {\n    console.log(\"Error\", err);\n    return REGISTER_FAIL;\n  }\n};\nexport const logout = async () => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({});\n  try {\n    const res = await axios.post(`http://localhost:8000/auth/logout`, body, config);\n    if (res.data.success) {\n      return LOGOUT_SUCCESS;\n    } else {\n      return LOGOUT_FAIL;\n    }\n  } catch (err) {\n    return LOGOUT_FAIL;\n  }\n};","map":{"version":3,"names":["Cookies","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","axios","AxiosInstance","checkAuthenticated","config","withCredentials","headers","res","get","data","error","isAuthenticated","userProfileId","isManager","err","login","username","password","body","JSON","stringify","post","success","type","payload","register","re_password","console","log","logout"],"sources":["C:/Users/prite/WebstormProjects/lab4/my-app/src/Supporting Files/auth.js"],"sourcesContent":["import Cookies from 'js-cookie';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL\r\n} from './reducer';\r\n\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\nexport const checkAuthenticated = async () => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.get(`http://localhost:8000/authenticated`, config);\r\n\r\n        if (res.data.error || res.data.isAuthenticated === 'error') {\r\n            return  AUTHENTICATED_FAIL\r\n        }\r\n        else if (res.data.isAuthenticated === 'success') {\r\n            return {isAuthenticated: AUTHENTICATED_SUCCESS, userProfileId: res.data.userProfileId, isManager: res.data.isManager}\r\n        }\r\n        else {\r\n            return  AUTHENTICATED_FAIL\r\n        }\r\n    } catch(err) {\r\n        return  AUTHENTICATED_FAIL\r\n    }\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password });\r\n\r\n    try {\r\n        const res = await axios.post('http://localhost:8000/auth/login', body, config)\r\n\r\n        if (res.data.success) {\r\n            return {type: LOGIN_SUCCESS, payload: res.data.userProfileId}\r\n        } else {\r\n            return LOGIN_FAIL\r\n        }\r\n    } catch(err) {\r\n        return LOGIN_FAIL\r\n    }\r\n};\r\n\r\nexport const register = async(username, password, re_password) => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password, re_password });\r\n\r\n    console.log(\"Body\", body)\r\n    try {\r\n        const res = await axios.post('http://localhost:8000/auth/register', body, config)\r\n        if (res.data.error) {\r\n            console.log(\"REGISTER_FAIL\")\r\n            return REGISTER_FAIL\r\n        } else {\r\n            console.log(\"REGISTER_SUCCESS\")\r\n            return REGISTER_SUCCESS\r\n        }\r\n    } catch (err) {\r\n        console.log(\"Error\", err)\r\n        return REGISTER_FAIL\r\n    }\r\n};\r\n\r\nexport const logout = async ()  => {\r\n    const config = {\r\n        withCredentials: true,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({});\r\n\r\n    try {\r\n        const res = await axios.post(`http://localhost:8000/auth/logout`, body, config);\r\n\r\n        if (res.data.success) {\r\n            return LOGOUT_SUCCESS\r\n        } else {\r\n            return LOGOUT_FAIL\r\n        }\r\n    } catch(err) {\r\n        return LOGOUT_FAIL\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}